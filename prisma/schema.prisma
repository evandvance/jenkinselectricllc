// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Technicians {
  id          Int     @id @default(autoincrement())
  firstName   String  @map("first_name")
  lastName    String  @map("last_name")
  bio         String
  isCertified Boolean @default(false) @map("is_certified")
  imageUrl    String  @map("image_url")

  @@unique([firstName, lastName])
  @@index([firstName, lastName])
  @@map("technicians")
}

enum ApplianceTypes {
  dryer
  washer
  dishwasher
  fridge
  freezer
  microwave
  stoves
  windowunit
  icemaker
  industrial
  dryerwashersets
  other

  @@map("appliance_types")
}

enum ApplianceAges {
  Used
  New

  @@map("appliance_ages")
}

model Appliances {
  id            Int               @id @default(autoincrement())
  applianceName String            @map("appliance_name")
  price         Float
  modelNumber   String            @map("model_number")
  description   String
  brand         String
  reservation   Reservations?
  images        ApplianceImages[]
  age           ApplianceAges
  type          ApplianceTypes

  @@map("appliances")
}

model ApplianceImages {
  id          Int        @id @default(autoincrement())
  applianceId Int        @map("appliance_id")
  imageUrl    String     @unique @map("image_url")
  appliance   Appliances @relation(fields: [applianceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([applianceId])
  @@map("appliance_images")
}

model Reservations {
  id          Int        @id @default(autoincrement())
  applianceId Int        @unique @map("appliance_id")
  email       String     @unique
  comments    String?
  reservedAt  DateTime   @default(now()) @map("reserved_at")
  firstName   String     @map("first_name")
  lastName    String     @map("last_name")
  phoneNumber String     @map("phone_number")
  street      String
  city        String
  state       String
  zip         Int
  appliance   Appliances @relation(fields: [applianceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([email])
  @@map("reservations")
}

model Users {
  id       Int    @id @default(autoincrement())
  username String @unique
  email    String @unique
  password String

  @@map("users")
}
